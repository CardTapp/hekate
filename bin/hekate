#!/usr/bin/env ruby

require_relative "../lib/hekate"

require "rubygems"
require "commander/import"

include Hekate::Dsl

def add_default_options(config)
  config.option "--application STRING", String, "The application name for which the imported secrets will be used"
  config.option "--environment STRING", String, "The rails environment for which the imported secrets will be used"
end

def configure(options)
  Hekate.configure do |config|
    config.application = options.application
    config.environment = options.environment
  end
end

# :name is optional, otherwise uses the basename of this executable
program :name, "Hekate"
program :version, Hekate::Version
program :description, "Gem for encrypting and storing rails application secrets as Amazon SSM parameters"

command :import do |c|
  c.syntax = "hekate import --environment development --application mycoolapp --file .env"
  c.description = "imports a .env formatted file into Amazon SSM"
  add_default_options c
  c.option "--file STRING", String, "The dotenv formatted file to import"
  c.action do |_args, options|
    configure(options)
    next unless Hekate.config.valid? do
      if options.file.blank? || !File.exist?(options.file)
        say("<%= color('--file was not provided or does not exist', RED) %>!")
        next(false)
      end

      unless agree("<%= color('WARNING!!! This will overwrite existing parameters for #{options.application} #{options.environment} in #{Hekate.config.region}. Continue?', RED) %>")
        say("<%= color('ABORTED', RED) %>!")
        next(false)
      end
      next(true)
    end

    import options.file
  end
end

command :put do |c|
  c.syntax = "hekate put --environment development --application mycoolapp --key somekey --value somevalue"
  c.description = "adds a new environment secret and value"
  add_default_options c
  c.option "--key STRING", String, "The name of the secret to store"
  c.option "--value STRING", String, "The value to store in the secret"
  c.action do |_args, options|
    configure(options)
    next unless Hekate.config.valid? do
      if options.key.blank? || options.value.blank?
        say("<%= color('--key and --value are required', RED) %>!")
        next(false)
      end
      next(true)
    end

    put options.key, options.value
  end
end

command :delete do |c|
  c.syntax = "hekate delete --environment development --application mycoolapp --key somekey"
  c.description = "deletes an environment secret"
  add_default_options c
  c.option "--key STRING", String, "The name of the secret to delete"
  c.action do |_args, options|
    configure(options)
    next unless Hekate.config.valid? do
      if options.key.blank?
        say("<%= color('--key is required', RED) %>!")
        next(false)
      end
      next(true)
    end

    delete options.key
  end
end

command :delete_all do |c|
  c.syntax = "hekate delete_all --environment development --application mycoolapp"
  c.description = "deletes all secrets for the give environment"
  add_default_options c
  c.action do |_args, options|
    configure(options)
    next unless Hekate.config.valid? do
      unless agree("<%= color('WARNING!!! This will delete all existing parameters for #{options.application} #{options.environment} in #{options.region}. Continue?', RED) %>")
        say("<%= color('ABORTED', RED) %>!")
        next(false)
      end
      next(true)
    end

    parameters = get_all
    progress = Commander::UI::ProgressBar.new(parameters.length)
    parameters.each do |parameter|
      progress.increment
      ssm_client.delete(parameter)
    end
  end
end

command :get do |c|
  c.syntax = "hekate get --environment development --application mycoolapp --key somekey"
  c.description = "retrieves an unencrypted environment secret"
  add_default_options c
  c.option "--key STRING", String, "The name of the secret to delete"
  c.action do |_args, options|
    configure(options)
    next unless Hekate.config.valid? do
      if options.key.blank?
        say("<%= color('--key is required', RED) %>!")
        next(false)
      end
      next(true)
    end

    get(options.key)
  end
end

command :export do |c|
  c.syntax = "hekate export --region us-west-2 --environment development --application mycoolapp --file .env"
  c.description = "exports Amazon SSM parameters to a .env formatted file"
  add_default_options c
  c.option "--file STRING", String, "The dotenv formatted file to export to"
  c.action do |_args, options|
    configure(options)
    next unless Hekate.config.valid? do
      if options.file.blank?
        say("<%= color('--file is required', RED) %>!")
        next(false)
      end
      if File.exist?(options.file) && !agree("<%= color('File already exists. Overwrite?', RED) %>!")
        say("<%= color('ABORTED', RED) %>!")
        next(false)
      end
      next true
    end

    export options.file
  end
end
